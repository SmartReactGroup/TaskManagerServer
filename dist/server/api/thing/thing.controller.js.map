{"version":3,"sources":["api/thing/thing.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","Thing","find","exec","catch","findById","params","id","body","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"thing.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/things              ->  index\n * POST    /api/things              ->  create\n * GET     /api/things/:id          ->  show\n * PUT     /api/things/:id          ->  upsert\n * PATCH   /api/things/:id          ->  patch\n * DELETE  /api/things/:id          ->  destroy\n */\n\n'use strict'\n\nimport { applyPatch } from 'fast-json-patch'\nimport Thing from './thing.model'\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200\n  return function(entity) {\n    if (entity) {\n      return res.status(statusCode).json(entity)\n    }\n    return null\n  }\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      applyPatch(entity, patches, /*validate*/ true)\n    } catch (err) {\n      return Promise.reject(err)\n    }\n\n    return entity.save()\n  }\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove().then(() => res.status(204).end())\n    }\n  }\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end()\n      return null\n    }\n    return entity\n  }\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500\n  return function(err) {\n    res.status(statusCode).send(err)\n  }\n}\n\n// Gets a list of Things\nexport function index(req, res) {\n  return Thing\n    .find()\n    .exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res))\n}\n\n// Gets a single Thing from the DB\nexport function show(req, res) {\n  return Thing.findById(req.params.id)\n    .exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res))\n}\n\n// Creates a new Thing in the DB\nexport function create(req, res) {\n  return Thing.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res))\n}\n\n// Upserts the given Thing in the DB at the specified ID\nexport function upsert(req, res) {\n  if (req.body._id) {\n    Reflect.deleteProperty(req.body, '_id')\n  }\n  return Thing.findOneAndUpdate({ _id: req.params.id }, req.body, {\n    new: true,\n    upsert: true,\n    setDefaultsOnInsert: true,\n    runValidators: true\n  })\n    .exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res))\n}\n\n// Updates an existing Thing in the DB\nexport function patch(req, res) {\n  if (req.body._id) {\n    Reflect.deleteProperty(req.body, '_id')\n  }\n  return Thing.findById(req.params.id)\n    .exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res))\n}\n\n// Deletes a Thing from the DB\nexport function destroy(req, res) {\n  return Thing.findById(req.params.id)\n    .exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res))\n}\n"]}