{"version":3,"sources":["api/user/user.model.js"],"names":["mongoose","Promise","require","UserSchema","Schema","name","String","email","type","lowercase","required","role","default","password","provider","salt","virtual","get","_id","path","validate","length","value","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","defaultByteSize","byteSize","crypto","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"AAAA;AACA;;;;;;AACA;;;;AAEA;;;;AACA;;;;AAFAA,mBAASC,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;AAIA,IAAMC,aAAa,IAAIC,gBAAJ,CAAW;AAC5BC,QAAMC,MADsB;AAE5BC,SAAO;AACLC,UAAMF,MADD;AAELG,eAAW,IAFN;AAGLC,cAAU;AAHL,GAFqB;AAO5BC,QAAM;AACJH,UAAMF,MADF;AAEJM,aAAS;AAFL,GAPsB;AAW5BC,YAAU;AACRL,UAAMF,MADE;AAERI,cAAU;AAFF,GAXkB;AAe5BI,YAAUR,MAfkB;AAgB5BS,QAAMT;AAhBsB,CAAX,CAAnB;;AAmBA;;;;AAIA;AACAH,WAAWa,OAAX,CAAmB,SAAnB,EAA8BC,GAA9B,CAAkC,YAAW;AAC3C,SAAO;AACLZ,UAAM,KAAKA,IADN;AAELM,UAAM,KAAKA;AAFN,GAAP;AAID,CALD;;AAOA;AACAR,WAAWa,OAAX,CAAmB,OAAnB,EAA4BC,GAA5B,CAAgC,YAAW;AACzC,SAAO;AACLC,SAAK,KAAKA,GADL;AAELP,UAAM,KAAKA;AAFN,GAAP;AAID,CALD;;AAOA;;;;AAIA;AACAR,WAAWgB,IAAX,CAAgB,OAAhB,EAAyBC,QAAzB,CAAkC,UAASb,KAAT,EAAgB;AAChD,SAAOA,MAAMc,MAAb;AACD,CAFD,EAEG,uBAFH;;AAIA;AACAlB,WAAWgB,IAAX,CAAgB,UAAhB,EAA4BC,QAA5B,CAAqC,UAASP,QAAT,EAAmB;AACtD,SAAOA,SAASQ,MAAhB;AACD,CAFD,EAEG,0BAFH;;AAIA;AACAlB,WAAWgB,IAAX,CAAgB,OAAhB,EAAyBC,QAAzB,CAAkC,UAASE,KAAT,EAAgB;AAAA;;AAChD,SAAO,KAAKC,WAAL,CACJC,OADI,CACI,EAAEjB,OAAOe,KAAT,EADJ,EAEJG,IAFI,GAGJC,IAHI,CAGC,UAACC,IAAD,EAAU;AACd,QAAIA,IAAJ,EAAU;AACR,UAAI,MAAKC,EAAL,KAAYD,KAAKC,EAArB,EAAyB;AACvB,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD,GAXI,EAYJC,KAZI,CAYE,UAASC,GAAT,EAAc;AACnB,UAAMA,GAAN;AACD,GAdI,CAAP;AAeD,CAhBD,EAgBG,gDAhBH;;AAkBA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAAST,KAAT,EAAgB;AACzC,SAAOA,SAASA,MAAMD,MAAtB;AACD,CAFD;;AAIA;;;AAGAlB,WAAW6B,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAAA;;AACpC;AACA,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOD,MAAP;AACD;;AAED,MAAI,CAACF,mBAAmB,KAAKlB,QAAxB,CAAL,EAAwC;AACtC,WAAOoB,KAAK,IAAIE,KAAJ,CAAU,kBAAV,CAAL,CAAP;AACD;;AAED;AACA,OAAKC,QAAL,CAAc,UAACC,OAAD,EAAUtB,IAAV,EAAmB;AAC/B,QAAIsB,OAAJ,EAAa;AACX,aAAOJ,KAAKI,OAAL,CAAP;AACD;AACD,WAAKtB,IAAL,GAAYA,IAAZ;AACA,WAAKuB,eAAL,CAAqB,OAAKzB,QAA1B,EAAoC,UAAC0B,UAAD,EAAaC,cAAb,EAAgC;AAClE,UAAID,UAAJ,EAAgB;AACd,eAAON,KAAKM,UAAL,CAAP;AACD;AACD,aAAK1B,QAAL,GAAgB2B,cAAhB;AACA,aAAOP,MAAP;AACD,KAND;AAOD,GAZD;AAaD,CAxBD;;AA0BA;;;AAGA9B,WAAWsC,OAAX,GAAqB;AACnB;;;;;;;;AAQAC,cATmB,wBASN7B,QATM,EASI8B,QATJ,EASc;AAAA;;AAC/B,QAAI,CAACA,QAAL,EAAe;AACb,aAAO,KAAK9B,QAAL,KAAkB,KAAKyB,eAAL,CAAqBzB,QAArB,CAAzB;AACD;;AAED,SAAKyB,eAAL,CAAqBzB,QAArB,EAA+B,UAACiB,GAAD,EAAMc,MAAN,EAAiB;AAC9C,UAAId,GAAJ,EAAS;AACP,eAAOa,SAASb,GAAT,CAAP;AACD;;AAED,UAAI,OAAKjB,QAAL,KAAkB+B,MAAtB,EAA8B;AAC5B,eAAOD,SAAS,IAAT,EAAe,IAAf,CAAP;AACD,OAFD,MAEO;AACL,eAAOA,SAAS,IAAT,EAAe,KAAf,CAAP;AACD;AACF,KAVD;AAWD,GAzBkB;;;AA2BnB;;;;;;;;AAQAP,UAnCmB,sBAmCD;AAChB,QAAIS,kBAAkB,EAAtB;AACA,QAAIC,iBAAJ;AACA,QAAIH,iBAAJ;;AAEA,QAAI,8DAAmB,UAAvB,EAAmC;AACjCA;AACAG,iBAAWD,eAAX;AACD,KAHD,MAGO,IAAI,8DAAmB,UAAvB,EAAmC;AACxCF;AACD,KAFM,MAEA;AACL,YAAM,IAAIR,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,QAAI,CAACW,QAAL,EAAe;AACbA,iBAAWD,eAAX;AACD;;AAED,WAAOE,iBAAOC,WAAP,CAAmBF,QAAnB,EAA6B,UAAChB,GAAD,EAAMf,IAAN,EAAe;AACjD,UAAIe,GAAJ,EAAS;AACP,eAAOa,SAASb,GAAT,CAAP;AACD,OAFD,MAEO;AACL,eAAOa,SAAS,IAAT,EAAe5B,KAAKkC,QAAL,CAAc,QAAd,CAAf,CAAP;AACD;AACF,KANM,CAAP;AAOD,GA5DkB;;;AA8DnB;;;;;;;;AAQAX,iBAtEmB,2BAsEHzB,QAtEG,EAsEO8B,QAtEP,EAsEiB;AAClC,QAAI,CAAC9B,QAAD,IAAa,CAAC,KAAKE,IAAvB,EAA6B;AAC3B,UAAI,CAAC4B,QAAL,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOA,SAAS,0BAAT,CAAP;AACD;AACF;;AAED,QAAIO,oBAAoB,KAAxB;AACA,QAAIC,mBAAmB,EAAvB;AACA,QAAIpC,OAAO,IAAIqC,MAAJ,CAAW,KAAKrC,IAAhB,EAAsB,QAAtB,CAAX;;AAEA,QAAI,CAAC4B,QAAL,EAAe;AACb,aAAOI,iBAAOM,UAAP,CAAkBxC,QAAlB,EAA4BE,IAA5B,EAAkCmC,iBAAlC,EAAqDC,gBAArD,EAAuE,QAAvE,EAAiFF,QAAjF,CAA0F,QAA1F,CAAP;AACD;;AAED,WAAOF,iBAAOO,MAAP,CAAczC,QAAd,EAAwBE,IAAxB,EAA8BmC,iBAA9B,EAAiDC,gBAAjD,EAAmE,QAAnE,EAA6E,UAACrB,GAAD,EAAMyB,GAAN,EAAc;AAChG,UAAIzB,GAAJ,EAAS;AACP,eAAOa,SAASb,GAAT,CAAP;AACD,OAFD,MAEO;AACL,eAAOa,SAAS,IAAT,EAAeY,IAAIN,QAAJ,CAAa,QAAb,CAAf,CAAP;AACD;AACF,KANM,CAAP;AAOD;AA9FkB,CAArB;;AAiGA,0BAAe9C,UAAf;kBACeH,mBAASwD,KAAT,CAAe,MAAf,EAAuBrD,UAAvB,C","file":"user.model.js","sourcesContent":["'use strict'\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto'\nmongoose.Promise = require('bluebird')\nimport mongoose, { Schema } from 'mongoose'\nimport { registerEvents } from './user.events'\n\nconst UserSchema = new Schema({\n  name: String,\n  email: {\n    type: String,\n    lowercase: true,\n    required: true\n  },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  provider: String,\n  salt: String\n})\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema.virtual('profile').get(function() {\n  return {\n    name: this.name,\n    role: this.role\n  }\n})\n\n// Non-sensitive info we'll be putting in the token\nUserSchema.virtual('token').get(function() {\n  return {\n    _id: this._id,\n    role: this.role\n  }\n})\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema.path('email').validate(function(email) {\n  return email.length\n}, 'Email cannot be blank')\n\n// Validate empty password\nUserSchema.path('password').validate(function(password) {\n  return password.length\n}, 'Password cannot be blank')\n\n// Validate email is not taken\nUserSchema.path('email').validate(function(value) {\n  return this.constructor\n    .findOne({ email: value })\n    .exec()\n    .then((user) => {\n      if (user) {\n        if (this.id === user.id) {\n          return true\n        }\n        return false\n      }\n      return true\n    })\n    .catch(function(err) {\n      throw err\n    })\n}, 'The specified email address is already in use.')\n\nconst validatePresenceOf = function(value) {\n  return value && value.length\n}\n\n/**\n * Pre-save hook\n */\nUserSchema.pre('save', function(next) {\n  // Handle new/update passwords\n  if (!this.isModified('password')) {\n    return next()\n  }\n\n  if (!validatePresenceOf(this.password)) {\n    return next(new Error('Invalid password'))\n  }\n\n  // Make salt with a callback\n  this.makeSalt((saltErr, salt) => {\n    if (saltErr) {\n      return next(saltErr)\n    }\n    this.salt = salt\n    this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n      if (encryptErr) {\n        return next(encryptErr)\n      }\n      this.password = hashedPassword\n      return next()\n    })\n  })\n})\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n     * Authenticate - check if the passwords are the same\n     *\n     * @param {String} password\n     * @param {Function} callback\n     * @return {Boolean}\n     * @api public\n     */\n  authenticate(password, callback) {\n    if (!callback) {\n      return this.password === this.encryptPassword(password)\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if (err) {\n        return callback(err)\n      }\n\n      if (this.password === pwdGen) {\n        return callback(null, true)\n      } else {\n        return callback(null, false)\n      }\n    })\n  },\n\n  /**\n     * Make salt\n     *\n     * @param {Number} [byteSize] - Optional salt byte size, default to 16\n     * @param {Function} callback\n     * @return {String}\n     * @api public\n     */\n  makeSalt(...args) {\n    var defaultByteSize = 16\n    let byteSize\n    let callback\n\n    if (typeof args[0] === 'function') {\n      callback = args[0]\n      byteSize = defaultByteSize\n    } else if (typeof args[1] === 'function') {\n      callback = args[1]\n    } else {\n      throw new Error('Missing Callback')\n    }\n\n    if (!byteSize) {\n      byteSize = defaultByteSize\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if (err) {\n        return callback(err)\n      } else {\n        return callback(null, salt.toString('base64'))\n      }\n    })\n  },\n\n  /**\n     * Encrypt password\n     *\n     * @param {String} password\n     * @param {Function} callback\n     * @return {String}\n     * @api public\n     */\n  encryptPassword(password, callback) {\n    if (!password || !this.salt) {\n      if (!callback) {\n        return null\n      } else {\n        return callback('Missing password or salt')\n      }\n    }\n\n    var defaultIterations = 10000\n    var defaultKeyLength = 64\n    var salt = new Buffer(this.salt, 'base64')\n\n    if (!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength, 'sha256').toString('base64')\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, 'sha256', (err, key) => {\n      if (err) {\n        return callback(err)\n      } else {\n        return callback(null, key.toString('base64'))\n      }\n    })\n  }\n}\n\nregisterEvents(UserSchema)\nexport default mongoose.model('User', UserSchema)\n"]}