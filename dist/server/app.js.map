{"version":3,"sources":["app.js"],"names":["mongoose","Promise","require","connect","config","mongo","uri","options","connection","on","err","console","error","process","exit","app","server","http","createServer","wsInitPromise","startServer","angularFullstack","listen","port","ip","log","get","then","primus","seedDatabaseIfNeeded","catch","exports","module"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AANAA,mBAASC,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAQA;AACAF,mBAASG,OAAT,CAAiBC,sBAAOC,KAAP,CAAaC,GAA9B,EAAmCF,sBAAOC,KAAP,CAAaE,OAAhD;AACAP,mBAASQ,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAASC,GAAT,EAAc;AAC5CC,UAAQC,KAAR,gCAA2CF,GAA3C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd,EAF4C,CAE3B;AAClB,CAHD;;AAKA;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,SAASC,eAAKC,YAAL,CAAkBH,GAAlB,CAAf;AACA,IAAMI,gBAAgB,0BAAoBH,MAApB,CAAtB;AACA,uBAAcD,GAAd;AACA,sBAAeA,GAAf;;AAEA;AACA,SAASK,WAAT,GAAuB;AACrBL,MAAIM,gBAAJ,GAAuBL,OAAOM,MAAP,CAAclB,sBAAOmB,IAArB,EAA2BnB,sBAAOoB,EAAlC,EAAsC,YAAW;AACtEb,YAAQc,GAAR,CAAY,4CAAZ,EAA0DrB,sBAAOmB,IAAjE,EAAuER,IAAIW,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;;AAEDP,cACGQ,IADH,CACQ,UAACC,MAAD,EAAY;AAChBb,MAAIa,MAAJ,GAAaA,MAAb;AACD,CAHH,EAIGD,IAJH,CAIQE,cAJR,EAKGF,IALH,CAKQP,WALR,EAMGU,KANH,CAMS,UAACpB,GAAD,EAAS;AACdC,UAAQc,GAAR,CAAY,yCAAZ,EAAuDf,GAAvD;AACD,CARH;;AAUA;AACAqB,UAAUC,OAAOD,OAAP,GAAiBhB,GAA3B","file":"app.js","sourcesContent":["import express from 'express'\nimport mongoose from 'mongoose'\nmongoose.Promise = require('bluebird')\nimport config from './config/environment'\nimport http from 'http'\nimport initWebSocketServer from './config/websockets'\nimport expressConfig from './config/express'\nimport registerRoutes from './routes'\nimport seedDatabaseIfNeeded from './config/seed'\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options)\nmongoose.connection.on('error', function(err) {\n  console.error(`MongoDB connection error: ${err}`)\n  process.exit(-1) // eslint-disable-line no-process-exit\n})\n\n// Setup server\nconst app = express()\nconst server = http.createServer(app)\nconst wsInitPromise = initWebSocketServer(server)\nexpressConfig(app)\nregisterRoutes(app)\n\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'))\n  })\n}\n\nwsInitPromise\n  .then((primus) => {\n    app.primus = primus\n  })\n  .then(seedDatabaseIfNeeded)\n  .then(startServer)\n  .catch((err) => {\n    console.log('Server failed to start due to error: %s', err)\n  })\n\n// Expose app\nexports = module.exports = app\n"]}