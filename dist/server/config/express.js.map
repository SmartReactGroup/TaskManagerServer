{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","express","static","path","join","config","root","set","engine","require","renderFile","bodyParser","urlencoded","extended","json","passport","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","mongoose","connection","db","process","SAUCE_USERNAME","csrf","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection"],"mappings":"AAAA;;;;;;kBAoBe,UAASA,GAAT,EAAc;AAC3B,MAAMC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAZ;;AAEA,MAAID,QAAQ,aAAR,IAAyBA,QAAQ,MAArC,EAA6C;AAC3CD,QAAIG,GAAJ,CAAQC,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACD;;AAED,MAAIR,QAAQ,YAAZ,EAA0B;AACxBD,QAAIG,GAAJ,CAAQ,4BAAQG,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACD;;AAEDT,MAAIU,GAAJ,CAAQ,SAAR,EAAmBJ,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAT,MAAIG,GAAJ,CAAQC,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,QAAjC,CAAf,CAAR;AACAT,MAAIG,GAAJ,CAAQC,kBAAQC,MAAR,CAAeL,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,MAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,MAAIU,GAAJ,CAAQ,OAAR,EAAoBF,sBAAOC,IAA3B;AACAT,MAAIW,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAb,MAAIU,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAV,MAAIG,GAAJ,CAAQ,4BAAR;AACAH,MAAIG,GAAJ,CAAQW,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAhB,MAAIG,GAAJ,CAAQW,qBAAWG,IAAX,EAAR;AACAjB,MAAIG,GAAJ,CAAQ,+BAAR;AACAH,MAAIG,GAAJ,CAAQ,6BAAR;AACAH,MAAIG,GAAJ,CAAQe,mBAASC,UAAT,EAAR;;AAEA;AACA;AACA;AACAnB,MAAIG,GAAJ,CACE,8BAAQ;AACNiB,YAAQZ,sBAAOa,OAAP,CAAeC,OADjB;AAENC,uBAAmB,IAFb;AAGNC,YAAQ,KAHF;AAINC,WAAO,IAAIC,UAAJ,CAAe;AACpBC,0BAAoBC,mBAASC,UADT;AAEpBC,UAAI;AAFgB,KAAf;AAJD,GAAR,CADF;;AAYA;;;;AAIA,MAAI7B,QAAQ,MAAR,IAAkBA,QAAQ,aAA1B,IAA2C,CAAC8B,QAAQ9B,GAAR,CAAY+B,cAA5D,EAA4E;AAC1E;AACAhC,QAAIG,GAAJ,CACE,qBAAM;AACJ8B,YAAM,IADF;AAEJC,cAAQ,YAFJ;AAGJC,YAAM;AACJC,gBAAQ,QADJ,EACc;AAClBC,2BAAmB,IAFf;AAGJC,iBAAS;AAHL,OAHF;AAQJC,qBAAe;AARX,KAAN,CADF;AAYD;;AAED,MAAItC,QAAQ,aAAR,IAAyBA,QAAQ,MAArC,EAA6C;AAC3CD,QAAIG,GAAJ,CAAQ,6BAAR,EAD2C,CACnB;AACzB;AACF,C;;AAlFD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMuB,aAAa,4BAAaJ,wBAAb,CAAnB","file":"express.js","sourcesContent":["'use strict'\n\nimport express from 'express'\nimport favicon from 'serve-favicon'\nimport morgan from 'morgan'\nimport compression from 'compression'\nimport bodyParser from 'body-parser'\nimport methodOverride from 'method-override'\nimport cookieParser from 'cookie-parser'\nimport errorHandler from 'errorhandler'\nimport path from 'path'\nimport lusca from 'lusca'\nimport config from './environment'\nimport passport from 'passport'\nimport session from 'express-session'\nimport connectMongo from 'connect-mongo'\nimport mongoose from 'mongoose'\n\nconst MongoStore = connectMongo(session)\n\nexport default function(app) {\n  const env = app.get('env')\n\n  if (env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')))\n  }\n\n  if (env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')))\n  }\n\n  app.set('appPath', path.join(config.root, 'client'))\n  app.use(express.static(path.join(config.root, 'client', 'assets')))\n  app.use(express.static(app.get('appPath')))\n  app.use(morgan('dev'))\n\n  app.set('views', `${config.root}/server/views`)\n  app.engine('html', require('ejs').renderFile)\n  app.set('view engine', 'html')\n  app.use(compression())\n  app.use(bodyParser.urlencoded({ extended: false }))\n  app.use(bodyParser.json())\n  app.use(methodOverride())\n  app.use(cookieParser())\n  app.use(passport.initialize())\n\n  // Persist sessions with MongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(\n    session({\n      secret: config.secrets.session,\n      saveUninitialized: true,\n      resave: false,\n      store: new MongoStore({\n        mongooseConnection: mongoose.connection,\n        db: 'server'\n      })\n    })\n  )\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if (env !== 'test' && env !== 'development' && !process.env.SAUCE_USERNAME) {\n    // eslint-disable-line no-process-env\n    app.use(\n      lusca({\n        csrf: true,\n        xframe: 'SAMEORIGIN',\n        hsts: {\n          maxAge: 31536000, //1 year, in seconds\n          includeSubDomains: true,\n          preload: true\n        },\n        xssProtection: true\n      })\n    )\n  }\n\n  if (env === 'development' || env === 'test') {\n    app.use(errorHandler()) // Error handler - has to be last\n  }\n}\n"]}