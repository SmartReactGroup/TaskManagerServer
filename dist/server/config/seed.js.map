{"version":3,"sources":["config/seed.js"],"names":["seedDatabaseIfNeeded","config","seedDB","resolve","promises","thingPromise","Thing","find","remove","then","create","name","info","console","log","catch","err","push","userPromise","User","provider","email","password","role","all"],"mappings":"AAAA;;;;;AAKA;;;;;;;;;;kBAKwBA,oB;;AAJxB;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,oBAAT,GAAgC;AAC7C,MAAI,CAACC,sBAAOC,MAAZ,EAAoB;AAClB,WAAO,kBAAQC,OAAR,EAAP;AACD;;AAED,MAAIC,WAAW,EAAf;;AAEA,MAAIC,eAAeC,gBAAMC,IAAN,CAAW,EAAX,EAChBC,MADgB,GAEhBC,IAFgB,CAEX;AAAA,WACJH,gBAAMI,MAAN,CACE;AACEC,YAAM,mBADR;AAEEC,YACE,0GACE;AAJN,KADF,EAOE;AACED,YAAM,+BADR;AAEEC,YAAM;AAFR,KAPF,EAWE;AACED,YAAM,oBADR;AAEEC,YACE,0GACE;AAJN,KAXF,EAiBE;AACED,YAAM,mBADR;AAEEC,YAAM;AAFR,KAjBF,EAqBE;AACED,YAAM,iBADR;AAEEC,YACE,yFACE;AAJN,KArBF,EA2BE;AACED,YAAM,kBADR;AAEEC,YAAM;AAFR,KA3BF,CADI;AAAA,GAFW,EAoChBH,IApCgB,CAoCX;AAAA,WAAMI,QAAQC,GAAR,CAAY,4BAAZ,CAAN;AAAA,GApCW,EAqChBC,KArCgB,CAqCV,UAACC,GAAD;AAAA,WAASH,QAAQC,GAAR,CAAY,yBAAZ,EAAuCE,GAAvC,CAAT;AAAA,GArCU,CAAnB;AAsCAZ,WAASa,IAAT,CAAcZ,YAAd;;AAEA,MAAIa,cAAcC,eAAKZ,IAAL,CAAU,EAAV,EACfC,MADe,GAEfC,IAFe,CAEV;AAAA,WACJU,eAAKT,MAAL,CACE;AACEU,gBAAU,OADZ;AAEET,YAAM,WAFR;AAGEU,aAAO,kBAHT;AAIEC,gBAAU;AAJZ,KADF,EAOE;AACEF,gBAAU,OADZ;AAEEG,YAAM,OAFR;AAGEZ,YAAM,OAHR;AAIEU,aAAO,mBAJT;AAKEC,gBAAU;AALZ,KAPF,EAeGb,IAfH,CAeQ;AAAA,aAAMI,QAAQC,GAAR,CAAY,2BAAZ,CAAN;AAAA,KAfR,EAgBGC,KAhBH,CAgBS,UAACC,GAAD;AAAA,aAASH,QAAQC,GAAR,CAAY,wBAAZ,EAAsCE,GAAtC,CAAT;AAAA,KAhBT,CADI;AAAA,GAFU,CAAlB;AAqBAZ,WAASa,IAAT,CAAcC,WAAd;;AAEA,SAAO,kBAAQM,GAAR,CAAYpB,QAAZ,CAAP;AACD","file":"seed.js","sourcesContent":["/**\n * Populate DB with sample data on server start\n * to disable, edit config/environment/index.js, and set `seedDB: false`\n */\n\n'use strict'\nimport Thing from '../api/thing/thing.model'\nimport User from '../api/user/user.model'\nimport config from './environment/'\n\nexport default function seedDatabaseIfNeeded() {\n  if (!config.seedDB) {\n    return Promise.resolve()\n  }\n\n  let promises = []\n\n  let thingPromise = Thing.find({})\n    .remove()\n    .then(() =>\n      Thing.create(\n        {\n          name: 'Development Tools',\n          info:\n            'Integration with popular tools such as Webpack, Babel, TypeScript, Karma, Mocha, ESLint, Protractor, '\n            + 'Pug, Stylus, Sass, and Less.'\n        },\n        {\n          name: 'Server and Client integration',\n          info: 'Built with a powerful and fun stack: MongoDB, Express, Angular, and Node.'\n        },\n        {\n          name: 'Smart Build System',\n          info:\n            'Build system ignores `spec` files, allowing you to keep tests alongside code. Automatic injection of '\n            + 'scripts and styles into your app.html'\n        },\n        {\n          name: 'Modular Structure',\n          info: 'Best practice client and server structures allow for more code reusability and maximum scalability'\n        },\n        {\n          name: 'Optimized Build',\n          info:\n            'Build process packs up your templates as a single JavaScript payload, minifies your '\n            + 'scripts/css/images, and rewrites asset names for caching.'\n        },\n        {\n          name: 'Deployment Ready',\n          info: 'Easily deploy your app to Heroku or Openshift with the heroku and openshift subgenerators'\n        }\n      )\n    )\n    .then(() => console.log('finished populating things'))\n    .catch((err) => console.log('error populating things', err))\n  promises.push(thingPromise)\n\n  let userPromise = User.find({})\n    .remove()\n    .then(() =>\n      User.create(\n        {\n          provider: 'local',\n          name: 'Test User',\n          email: 'test@example.com',\n          password: 'test'\n        },\n        {\n          provider: 'local',\n          role: 'admin',\n          name: 'Admin',\n          email: 'admin@example.com',\n          password: 'admin'\n        }\n      )\n        .then(() => console.log('finished populating users'))\n        .catch((err) => console.log('error populating users', err))\n    )\n  promises.push(userPromise)\n\n  return Promise.all(promises)\n}\n"]}