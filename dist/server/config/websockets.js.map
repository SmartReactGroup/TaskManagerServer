{"version":3,"sources":["config/websockets.js"],"names":["broadcast","initWebSocketServer","registerFunctions","require","register","onDisconnect","spark","console","info","address","ip","port","onConnect","on","data","log","primus","message","forEach","emit","server","Primus","transformer","plugin","primusEmit","process","env","NODE_ENV","resolve","reject","save","path","join","__dirname","err"],"mappings":"AAAA;;;AAGA;;;;;;;;;;;;;;;;;;QAgCgBA,S,GAAAA,S;kBAMQC,mB;;AArCxB;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,oBAAoB;AACxB;AACAC,QAAQ,2BAAR,EAAqCC,QAFb,CAA1B;;AAKA;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BC,UAAQC,IAAR,qBAA+BF,MAAMG,OAAN,CAAcC,EAA7C,SAAmDJ,MAAMG,OAAN,CAAcE,IAAjE;AACD;;AAED;AACA,SAASC,SAAT,CAAmBN,KAAnB,EAA0B;AACxBC,UAAQC,IAAR,qBAA+BF,MAAMG,OAAN,CAAcC,EAA7C,SAAmDJ,MAAMG,OAAN,CAAcE,IAAjE;;AAEA;AACAL,QAAMO,EAAN,CAAS,MAAT,EAAiB,UAACC,IAAD,EAAU;AACzBR,UAAMS,GAAN,CAAU,yBAAeD,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAV;AACD,GAFD;;AAIA;AARwB;AAAA;AAAA;;AAAA;AASxB,oDAAqBZ,iBAArB,4GAAwC;AAAA,UAA/BE,QAA+B;;AACtCA,eAASE,KAAT;AACD;AAXuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYzB;;AAED,IAAIU,eAAJ;;AAEO,SAAShB,SAAT,CAAmBiB,OAAnB,EAA4B;AACjCD,SAAOE,OAAP,CAAe,UAACZ,KAAD,EAAW;AACxBA,UAAMa,IAAN,CAAW,WAAX,EAAwBF,OAAxB;AACD,GAFD;AAGD;;AAEc,SAAShB,mBAAT,CAA6BmB,MAA7B,EAAqC;AAClDJ,WAAS,IAAIK,gBAAJ,CAAWD,MAAX,EAAmB;AAC1BE,iBAAa;AADa,GAAnB,CAAT;AAGAN,SAAOO,MAAP,CAAc,MAAd,EAAsBC,oBAAtB;;AAEAR,SAAOH,EAAP,CAAU,YAAV,EAAwBD,SAAxB;AACAI,SAAOH,EAAP,CAAU,eAAV,EAA2BR,YAA3B;;AAEA,MAAIoB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,WAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACAb,aAAOc,IAAP,CAAYC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,0CAArB,CAAZ,EAA8E,UAACC,GAAD,EAAS;AACrF,YAAIA,GAAJ,EAAS,OAAOL,OAAOK,GAAP,CAAP;;AAETN,gBAAQZ,MAAR;AACD,OAJD;AAKD,KAPM,CAAP;AAQD,GATD,MASO;AACL,WAAO,kBAAQY,OAAR,CAAgBZ,MAAhB,CAAP;AACD;AACF","file":"websockets.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict'\nimport path from 'path'\nimport Primus from 'primus'\nimport primusEmit from 'primus-emit'\n\nconst registerFunctions = [\n  // Insert sockets below\n  require('../api/thing/thing.socket').register\n]\n\n// When the user disconnects.. perform this\nfunction onDisconnect(spark) {\n  console.info(`WebSocket from ${spark.address.ip}:${spark.address.port} disconnected`)\n}\n\n// When the user connects.. perform this\nfunction onConnect(spark) {\n  console.info(`WebSocket from ${spark.address.ip}:${spark.address.port} connected`)\n\n  // When the client emits 'info', this listens and executes\n  spark.on('info', (data) => {\n    spark.log(JSON.stringify(data, null, 2))\n  })\n\n  // Register the spark with each WebSocket event handler\n  for (let register of registerFunctions) {\n    register(spark)\n  }\n}\n\nlet primus\n\nexport function broadcast(message) {\n  primus.forEach((spark) => {\n    spark.emit('broadcast', message)\n  })\n}\n\nexport default function initWebSocketServer(server) {\n  primus = new Primus(server, {\n    transformer: 'uws'\n  })\n  primus.plugin('emit', primusEmit)\n\n  primus.on('connection', onConnect)\n  primus.on('disconnection', onDisconnect)\n\n  if (process.env.NODE_ENV === 'development') {\n    return new Promise((resolve, reject) => {\n      // Save the primus client library configured for our server settings\n      primus.save(path.join(__dirname, '../../client/components/socket/primus.js'), (err) => {\n        if (err) return reject(err)\n\n        resolve(primus)\n      })\n    })\n  } else {\n    return Promise.resolve(primus)\n  }\n}\n"]}